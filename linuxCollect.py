#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
from fabric.api import *
from fabric.exceptions import NetworkError
import sys
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL)

#########################################################################
# Program: <APPLICATION DESCRIPTION HERE>
#########################################################################
#########################################################################
# Copyright: <COPYRIGHT NOTICE HERE>
#########################################################################
__version__ =   "0.9.4" # <release>.<major change>.<minor change>
__prog__ =      "<LinuxCollector>"
__author__ =    "<ssc>"

#########################################################################
## Pipeline:
## TODO: 
#########################################################################

#########################################################################
# XXX: Configuration
#########################################################################

EXIT_CODES = {
	"ok"	  : 0,
	"generic" : 1,
	"invalid" : 3,
	"missing" : 5,
	"limit"   : 7,
}

#########################################################################
# XXX: Helpers
#########################################################################

def readCommands(c):
    print c
    datei = open(str(c), 'rt')
    for line in datei:
        commands.append(line.strip())
    datei.close()


# noinspection PyPep8Naming
def readTarget(t):
    for target in t:
        rechner.append(target)

def readCommand(c):
    for command in c:
        commands.append(command)


# ToDo: Abfangen, wenn die letzte Zeile der Liste ein Enter am Ende hat
# noinspection PyPep8Naming
def readHostlist(h):
    datei = open(str(h), 'rt')
    for line in datei:
        rechner.append(line.rstrip())
    datei.close()


def createFile(h):
    helper=h.split('@')
    h=helper[1]
    print h
    log = open(h + '.html', 'a')
    log.write('<!doctype html>\n<html lang="de-de">')
    log.write('<head>\n<meta charset="UTF-8">\n<meta name="author" content="CERTBw">\n<meta name="author" content="CERTBw">')
    log.write('<title>CERTBw - Linux-Testing</title>\n')
    log.write('<style>\n')
    log.write('body {background-color: linen; margin:10px; padding:0px;}\n')
    log.write('a {color: black;}')
    log.write('a:hover {color:blue; background-color: yellow; font-weight: bold;}\n')
    log.write('h3 {margin-left:10px;}\n')
    log.write('pre {margin-left:25px; font-family:"courier new", courier, monospace;}\n')
    log.write('.oben {font-size:small;}\n')
    log.write('.warning {color: red;}\n')     
    log.write('.flip {padding: 10px; background-color: lightgray; color: black; margin: auto;}\n')
    log.write('</style>\n</head>\n')
    log.write('<body onclick="change(event)">\n')
    log.write('<script>\nfunction change(event) {\nvar p = "panel" + event.target.id;\nif (document.getElementById(p).style.display == "none") {\ndocument.getElementById(p).style.display = "block";\n}\nelse {\ndocument.getElementById(p).style.display = "none";\n}\n}\n</script>\n')
    log.write('<div>\n')
    log.write('<img height="120px" width="120px" alt="CERTBw" src="data:image/png;base64,\n')
    log.write('" style="float:left; margin-bottom:10px;">\n')           
    log.write('<h1>Computer Emergency Response Team Bundeswehr</h1>\n</div>\n')
    log.write('<div style="clear:both;">\n<hr / style="margin:5px;">\n')
    log.write('<h2>'+h+'</h2>')
    log.write('<ol>') 
    i = 1
    for b in commands:
        log.write('<li><a href="#' + str(i) + ' ">' + b + '</a></li>')
        i = i + 1
    log.write('</ol>')
    log.close


def writeLog(name, header, content):
    helper=name.split('@')
    name=helper[1]
    print name
    log = open(name, 'a')
    log.write(header)
    log.write(content)
    log.write('\n\n')
    log.close

#########################################################################
# XXX: Kick off
#########################################################################

def run():
    # <START CODING HERE>
    if (args.hostlist) or (args.target):
        for h in rechner:
            print h
            env.host_string = h  # Host zu dem die Verbindung aufgebaut wird
            # Nur Warnungen zeigen, nicht das Programm abbrechen
            env.warn_only = True
            # Hosts überspringen, welche nicht erreichbar sind
            env.skip_bad_hosts = True
            env.timeout = '60'
            # Logdatei als .html-Datei erstellen
            createFile(h)

            i = 0
            for b in commands:
                i = i + 1
                try:
                    result = sudo(b)

                    if result.return_code != 0:  # Error nicht loggen
                        header = '<h3 class="flip"  id="' + str(i) + '">' + b + '</h3>' + '\n'
                        content = '<div id="panel' + str(i) + '"> \n'
                        content = content +'<pre class="warning">Befehl konnte nicht ausgef&uuml;hrt werden</pre> \n'
                        content = content +'<a href="#" class="oben">nach oben</a>\n </div>\n \n'
                        dateiName = h + ".html"
                        writeLog(dateiName, header,content)
                        #ToDo: writeLog dateiname +log
                        continue

                    else:
                        header = '<h3 class="flip" id="' + str(i) + '">' + b + '</h3>' + '\n'
                        content  = '<div id="panel' + str(i) + '"> \n'
                        content = content +"<pre>" + result + "</pre>"
                        content = content + '<a href="#" class="oben">nach oben</a>\n </div>\n \n'
                        #content = (content.strip('\n'))
                        dateiName = h + ".html"
                        writeLog(dateiName, header, content)
                        print b

                except NetworkError as e:  # SSH Connection Refused abfangen
                    print e
                    break
        
        datName=h + ".html"
        head= " "
        cont= '</div></body></html>'
        writeLog(datName, head, cont)

    pass

#########################################################################
# XXX: Initialisation
#########################################################################

if __name__ == "__main__":

    # Liste der SSH-Hosts initialisieren
    rechner = []
    # ToDo: Mit Schalter aufteilen nach Grundbefehlen und erweiterteten Befehlen
#    Liste der Befehle
    commands = []

    # Parser für Argumente erstellen
    parser = argparse.ArgumentParser(
        description='remote command exec via SSH', epilog="So zerbroeselt der Keks nunmal...", prog='Linux Collector')
    parser.add_argument('-t', '--target', dest='target', action="store",
                        help='user@hostname:Port oder user@IP:Port, mehrere moeglich', nargs='*')
    parser.add_argument('-T', '--targetlist', dest='hostlist', action="store",
                        help='Pfad zur Hostliste, Format: user@host:Port')
    parser.add_argument('-c', '--command', dest='command', action='store', nargs='*')
    parser.add_argument('-C', '--commandlist', dest='commandl', action='store')

    parser.add_argument(
        '-v', '--version', action='version', version='%(prog)s 0.9beta')


    try:
        args = parser.parse_args()
    except:
        #parser.print_help()
        sys.exit(0)

    argsdict = vars(args)

    # Hostliste mit einzelnem Ziel befüllen
    if (args.target):
        readTarget(argsdict['target'])

    # Hostliste aus Datei befüllen
    if (args.hostlist):
        readHostlist(argsdict['hostlist'])

    if (args.commandl):
        readCommands(argsdict['commandl'])


    if (args.command):
        readCommand(argsdict['command'])	


	try:
		run()
        
	except KeyboardInterrupt:
		print "\n\nCancelled."
		sys.exit(0)